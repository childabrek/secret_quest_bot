import logging
import asyncio
from datetime import datetime
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardRemove, \
    ReplyKeyboardMarkup, KeyboardButton, \
    InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher.filters import Text
import re
import psycopg2
import aiogram.utils.markdown as md
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ParseMode
from aiogram.utils import executor

# –∑–∞–¥–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–æ–≤
logging.basicConfig(level=logging.INFO)
DB_URI = 'postgres://ncwiwqltyogxme:db5c56c3e31c54d392efb6ae625f83700777' \
         'c736d5d653f1b61bd09cee685ce1@ec2-176-34-105-15.eu-west-1.compute.amazonaws.com:5432/d8bpubesc766fo'
# –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
# TOKEN = your API token
bot = Bot(token='5295251052:AAG0BkwstG0vN59muiaOIpsUIFHpv-2jIBo')
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

db_connection = psycopg2.connect(DB_URI, sslmode='require')
db_object = db_connection.cursor()


class Form(StatesGroup):
    name = State()  # Will be represented in storage as 'Form:name'
    phone_number = State()  # Will be represented in storage as 'Form:age'


@dp.message_handler(commands=['start'])
async def process_start_command(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    but4 = types.KeyboardButton(text='–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è')
    keyboard.add(but4)
    # id1 = message.from_user.id
    # username = message.from_user.username
    # db_object.execute(f'SELECT id FROM users WHERE id = {id1}')
    # result = db_object.fetchone()
    #
    # if not result:
    #     db_object.execute('INSERT INTO users(id, username, name, phone_number) VALUES (%s, %s, %s)',
    #                       (id1, username, 0, 0))
    #     db_connection.commit()
    await message.reply("–ü—Ä–∏–≤–µ—Ç!", reply_markup=keyboard)
    # with open('text.txt') as a:
    #     b = a.readlines()
    #     await message.answer(*b)
    await message.answer('–î–∞–≤–Ω–æ –≤—ã –Ω–µ –æ—â—É—â–∞–ª–∏ —ç—Ç–æ–≥–æ —Å–µ–º–µ–π–Ω–æ–≥–æ –≤–∞–π–±–∞. –£ –ù–ê–° –î–õ–Ø –í–ê–° –•–û–†–û–®–ò–ï –ù–û–í–û–°–¢–ò!'
                         ' –°–∞–º–∞—è —Å–µ–º–µ–π–Ω–∞—è —Ç—É—Å–æ–≤–∫–∞ –≤–µ—Ä–Ω—É–ª–∞—Å—å –≤ —Å—Ç—Ä–æ–πüíï '
                         '@–ê–Ω–¥—Ä–µ–π —Å–Ω–æ–≤–∞ –∑–∞—Ä—è–¥–∏—Ç –≤–∞—Å –ø–æ–∑–∏—Ç–∏–≤–æ–º –∏ —ç–Ω–µ—Ä–≥–∏–µ–π –≤ –∫–æ–Ω—Ü–µ –Ω–µ–¥–µ–ª–∏, –∫–∞–∫ –≤ —Å—Ç–∞—Ä—ã–µ –¥–æ–±—Ä—ã–µüòé'
                         '–ù—É –∏ –∫–∞–∫ –∂–µ –±–µ–∑ –ø–æ–¥–∞—Ä–æ—á–∫–æ–≤? –ú—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∏ –¥–ª—è –≤–∞—Å:'
                         '1. 5 –ü–†–û–•–û–î–û–ö(–ø–æ–º–Ω–∏—Ç–µ, —á—Ç–æ —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ—Ö–æ–¥–∫–∞, –∫ –Ω–µ–π –≤ –ø–æ–¥–∞—Ä–æ–∫ –∏–¥—ë—Ç'
                         ' —Å–∞–º–æ–µ –∫—Ä—É—Ç–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏ –∫–ª–∞—Å—Å–Ω–æ –ø—Ä–æ–≤–µ–¥—ë–Ω–Ω–æ–µ –≤—Ä–µ–º—è)'
                         '2. 5 –ë–£–¢–´–õ–û–ö üçæ'
                         '3. –°–¢–†–ò–ñ–ö–ê –í @—Ñ—Ä–∞–Ω–∫ –±–∞—Ä–±–µ—Ä'
                         '–û–°–¢–ê–õ–¨–ù–´–ï –ü–û–î–ê–†–û–ß–ö–ò –ë–£–î–£–¢ –†–ê–°–ö–†–´–¢–´ –ß–£–¢–û–ß–ö–£ –ü–û–ó–ñ–ï '
                         '–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï –£–°–õ–û–í–ò–Ø:'
                         '1. –ë—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –Ω–∞ –Ω–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º–º (—Å—Å—ã–ª–∫–∞ –≤ —à–∞–ø–∫–µ –ø—Ä–æ—Ñ–∏–ª—è)'
                         '2. –û—Ç–º–µ—Ç–∏—Ç—å –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö –†–ê–ó–ù–´–• –¥—Ä—É–∑–µ–π (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ)'
                         '3. –°–¥–µ–ª–∞—Ç—å —Ä–µ–ø–æ—Å—Ç –∞—Ñ–∏—à–∏'
                         '–£—Å–ª–æ–≤–∏—è –≤—Ö–æ–¥–∞: '
                         '250‚ÇΩ - —Å —Ä–µ–ø–æ—Å—Ç–æ–º ‚úÖ'
                         '300‚ÇΩ - –±–µ–∑ ‚ùå'
                         '–î–ê–¢–ê: 18 –º–∞—Ä—Ç–∞'
                         '–û–¢–ö–†–´–¢–ò–ï: 19:00'
                         '–ó–ê–í–ï–î–ï–ù–ò–ï: LUNA BAR')


# @dp.message_handler(commands=['referal'])
# async def referal_start(message: types.Message):
#     my_channel_id = -1001478296614
#     user_channel_status = await bot.get_chat_member(chat_id=my_channel_id, user_id=message.chat.id)
#     user_channel_status = re.findall(r"\w*", str(user_channel_status))
#     try:
#         if user_channel_status[70] != 'left':
#             with open('1.png', mode='rb') as f:
#                 await bot.send_photo(message.from_user.id, f)
#             await bot.send_message(message.from_user.id, '–æ–∫')
#
#         else:
#             with open('2.png', mode='rb') as f:
#                 await bot.send_photo(message.from_user.id, f)
#             await bot.send_message(message.chat.id, 'ne ok')
#             # –£—Å–ª–æ–≤–∏–µ –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω
#     except:
#         if user_channel_status[60] != 'left':
#             with open('1.png', mode='rb') as f:
#                 await bot.send_photo(message.from_user.id, f)
#             await bot.send_message(message.from_user.id, 'ok1')
#             # –£—Å–ª–æ–≤–∏–µ –¥–ª—è "–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö"
#         else:
#             with open('2.png', mode='rb') as f:
#                 await bot.send_photo(message.from_user.id, f)
#             await bot.send_message(message.from_user.id, 'ne ok1')
#             # –£—Å–ª–æ–≤–∏–µ –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω
#
#
# @dp.message_handler(Text(equals='–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å'))
# async def one_use_answer(message: types.Message):
#     await message.answer('@siberian_vapor_102')
#
#
# @dp.message_handler(Text(equals='–û–î–ù–û–†–ê–ó–ö–ò'))
# async def one_use_answer(message: types.Message):
#     with open('one_use.txt', 'r', encoding='utf-8') as f:
#         texts = f.read()
#         await message.answer(texts)
#
#
# @dp.message_handler(Text(equals='–ñ–ï–õ–ï–ó–û'))
# async def hardware_answer(message: types.Message):
#     with open('hardware.txt', 'r', encoding='utf-8') as f:
#         texts = f.read()
#         await message.answer(texts)
#
#
# @dp.message_handler(Text(equals='–ñ–ò–î–ö–û–°–¢–ò'))
# async def liquids(message: types.Message):
#     keyboard = types.InlineKeyboardMarkup()
#     keyboard.add(types.InlineKeyboardButton(text="–©–µ–ª–æ—á–Ω—ã–µ", callback_data="liquids_standart"))
#     keyboard.add(types.InlineKeyboardButton(text="–°–æ–ª–µ–≤—ã–µ", callback_data="liquids_standart"))
#     await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫–∏–µ –∂–∏–¥–∫–æ—Å—Ç–∏ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç", reply_markup=keyboard)
#
#
# @dp.callback_query_handler(text='liquids_standart')
# async def liq_answer(call: types.CallbackQuery):
#     with open('liquids_standart.txt', 'r', encoding='utf-8') as f:
#         texts = f.read()
#         await call.message.answer(texts)
#         await call.answer()


@dp.message_handler(Text(equals='–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è'))
async def process_start_command2(message: types.Message):
    await Form.name.set()
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è')


@dp.message_handler(state=Form.name)
async def process_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['name'] = message.text

    await Form.next()
    await message.reply("–û—Ç–ª–∏—á–Ω–æ! —Ç–µ–ø–µ—Ä—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞?")


@dp.message_handler(state=Form.phone_number)
async def process_number(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['phone_number'] = message.text
        phone = data['phone_number']
        name = data['name']

    id1 = message.from_user.id
    username = message.from_user.username
    db_object.execute(f'SELECT id FROM users WHERE id = {id1}')
    result = db_object.fetchone()

    if not result:
        db_object.execute('INSERT INTO users(id, username, name, phone_number) VALUES (%s, %s, %s, %s)',
                          (id1, username, name, phone))
        print(id1, username, data['name'], data['phone_number'])
        db_connection.commit()
    await message.reply('–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!')
    await state.finish()


@dp.message_handler(commands=['chilldabrek'])
async def process_start_command1(message: types.Message):
    await message.reply("–î–∞ –¥–∞ –æ–Ω\ntelegram:\n@kerbadllihc\n\nhttps://github.com/childabrek")


# –∑–∞–ø—É—Å–∫–∞–µ–º –ª–æ–Ω–≥ –ø–æ–ª–ª–∏–Ω–≥
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
